// Generated by gencpp from file coord_to_lane/JsonToLaneResponse.msg
// DO NOT EDIT!


#ifndef COORD_TO_LANE_MESSAGE_JSONTOLANERESPONSE_H
#define COORD_TO_LANE_MESSAGE_JSONTOLANERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coord_to_lane
{
template <class ContainerAllocator>
struct JsonToLaneResponse_
{
  typedef JsonToLaneResponse_<ContainerAllocator> Type;

  JsonToLaneResponse_()
    : lanelet_ids()  {
    }
  JsonToLaneResponse_(const ContainerAllocator& _alloc)
    : lanelet_ids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _lanelet_ids_type;
  _lanelet_ids_type lanelet_ids;





  typedef boost::shared_ptr< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> const> ConstPtr;

}; // struct JsonToLaneResponse_

typedef ::coord_to_lane::JsonToLaneResponse_<std::allocator<void> > JsonToLaneResponse;

typedef boost::shared_ptr< ::coord_to_lane::JsonToLaneResponse > JsonToLaneResponsePtr;
typedef boost::shared_ptr< ::coord_to_lane::JsonToLaneResponse const> JsonToLaneResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator1> & lhs, const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator2> & rhs)
{
  return lhs.lanelet_ids == rhs.lanelet_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator1> & lhs, const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coord_to_lane

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6536ea10ea6cb2d403a81b2dcef96384";
  }

  static const char* value(const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6536ea10ea6cb2d4ULL;
  static const uint64_t static_value2 = 0x03a81b2dcef96384ULL;
};

template<class ContainerAllocator>
struct DataType< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coord_to_lane/JsonToLaneResponse";
  }

  static const char* value(const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] lanelet_ids\n"
"\n"
;
  }

  static const char* value(const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lanelet_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JsonToLaneResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coord_to_lane::JsonToLaneResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "lanelet_ids: ";
    if (v.lanelet_ids.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.lanelet_ids.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int32_t>::stream(s, true ? std::string() : indent + "    ", v.lanelet_ids[i]);
    }
    if (v.lanelet_ids.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORD_TO_LANE_MESSAGE_JSONTOLANERESPONSE_H
